#pragma once
#include <string>
#include <variant>

/**
 * @file Port.hpp
 * @brief Defines the basic data structures for ports and events in the
 * MilliSuono system.
 *
 * This file declares the fundamental types used for representing audio,
 * control, and event connections within the MilliSuono framework.
 */

namespace ms {

/**
 * @brief Defines the possible types of ports in the MilliSuono system.
 *
 * - Audio: for audio signal connections
 * - Control: for control parameters (float, int, bool, string)
 * - Event: for time-stamped control or trigger events
 */
enum class PortType { Audio, Control, Event };

/**
 * @brief Represents the value carried by a control or event port.
 *
 * This can be one of the following:
 * - float: for continuous parameters (e.g., gain, frequency)
 * - int: for discrete parameters or indices
 * - bool: for binary control signals (e.g., mute, toggle)
 * - std::string: for symbolic or textual data
 */
using ControlValue = std::variant<float, int, bool, std::string>;

/**
 * @brief Represents a time-stamped event in the audio processing timeline.
 *
 * Events are typically generated by control sources (e.g., user interaction,
 * automation, or MIDI input) and scheduled at a specific sample offset within
 * a processing block.
 */
struct Event {
  /** Type or category of the event (e.g., "note_on", "param_change"). */
  std::string type;

  /** The event payload, which can be any supported ControlValue type. */
  ControlValue value;

  /** The sample offset within the current processing block at which the event
   * occurs. */
  int sampleOffset;

  /**
   * @brief Constructs an Event object.
   * @param type The event type identifier.
   * @param value The payload associated with the event.
   * @param sampleOffset The sample index relative to the start of the
   * processing block.
   */
  Event(const std::string &type, const ControlValue &value, int sampleOffset)
      : type(type), value(value), sampleOffset(sampleOffset) {}
};

/**
 * @brief Represents an input or output port of a Node.
 *
 * Ports define the interface through which nodes exchange audio, control,
 * or event data in the MilliSuono engine.
 */
struct Port {
  /** The unique name of the port within a node. */
  std::string name;

  /** The type of the port (Audio, Control, or Event). */
  PortType type;

  /**
   * @brief Constructs a Port object.
   * @param name The name identifying the port.
   * @param type The port type (Audio, Control, or Event).
   */
  Port(const std::string &name, PortType type) : name(name), type(type) {}
};

} // namespace ms
